#!/usr/bin/env node

var path = require('path');
var fs = require('fs');

var smarty4Js = require('../index');
var utils = require('../lib/utils');

var args = process.argv.slice(2);
var cwd = process.cwd();
var ret = '';
var smarty = new smarty4Js();

var argvs = { tpl: [] };
var options = {};

function getObsPath(p) {
    if (p.charAt(0) == '/') {
        return p;
    }
    else {
        return path.resolve(cwd, p);
    }
}

if (args.length == 1 && (args[0] == '-v' || args[0] == '--version')) {
    console.log('version: ' + JSON.parse(
        fs.readFileSync( 
            require('path').resolve(__dirname, '../package.json'), 'UTF-8'
        )
    ).version);
}
else {
    args.forEach(function (argv) {
        if (argv.charAt(0) == '-') {
            argv = argv.slice(1);
            argv.split('').forEach(function (opt) {
                options[opt] = true;
            });
        }
        else if (argv.indexOf('.tpl') > -1) {
            argvs['tpl'].push(argv);
        }
        else if (argv.indexOf('.json') > -1) {
            argvs['data'] = argv;
        }
    });


    if (argvs.tpl.length) {
        argvs.tpl.forEach(function (tplPath) {
            var obsTplPath = getObsPath(tplPath);
            if (fs.existsSync(obsTplPath)) {
                dataHandler(obsTplPath);
            }
            else {
                console.log('Not found `' + tplPath + '`');
            }
        });
    }
    else {
        console.log('No template!');
    }
}


function dataHandler(tplPath) {
    
    var fileName = path.basename(tplPath).replace(/\..*/, '');
    var dataPath = argvs.data;

    if (dataPath) {
        var obsTplPath = getObsPath(dataPath);
        if (fs.existsSync(obsTplPath)) {
            renderData(tplPath, dataPath);
        }
        else {
            console.log('Not found `' + dataPath + '`');
        }
    }
    else {
        renderJsTpl(tplPath);
    }
}


function renderJsTpl(tplPath) {
    var ret = addClosure(smarty.compile(fs.readFileSync(tplPath, 'utf8')).getJsTpl());
    var fileName = path.basename(tplPath).replace(/\..*/, '');
    var dirname = path.dirname(tplPath);
    var assetPath = path.resolve(dirname, fileName + '.tpl.js');
    if (!options.o) {
        fs.writeFileSync(assetPath, ret, { encodeing: 'utf8' });
    }
    else {
        console.log(ret);
    }
}


function renderData(tplPath, dataPath) {
    var fileName = path.basename(tplPath).replace(/\..*/, '');
    var dirname = path.dirname(tplPath);
    var assetPath = path.resolve(dirname, fileName + '.tpl.html');
    var tpl = fs.readFileSync(tplPath, 'utf8');
    var data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
    var ret = smarty.render(tpl, data);

    if (!options.o) {
        fs.writeFileSync(assetPath, ret, { encodeing: 'utf8' });
    }
    else {
        console.log(ret);
    }
}

/**
 * [addClosure description]
 * @param {[type]} jsTpl [description]
 */
function addClosure(jsTpl) {
      return ''
        + '(function(){'
        +     'var __ret={'
        +         'render:function(data){\n' + jsTpl + '\n}'
        +     '};\n'
        +     'if (typeof exports=="object" && typeof module=="object"){exports=module.exports=__ret;}\n'
        +     'else if (typeof define=="function" && define.amd){define(__ret);}\n'
        +     'else {return __ret;}'
        + '})();'
}