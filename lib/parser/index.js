/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[4,7,8],$V3=[1,52],$V4=[1,24],$V5=[1,36],$V6=[1,27],$V7=[1,32],$V8=[1,33],$V9=[1,26],$Va=[1,28],$Vb=[1,42],$Vc=[1,29],$Vd=[1,31],$Ve=[1,30],$Vf=[1,54],$Vg=[1,25],$Vh=[1,37],$Vi=[1,38],$Vj=[1,43],$Vk=[1,39],$Vl=[1,40],$Vm=[1,41],$Vn=[1,58],$Vo=[1,46],$Vp=[1,53],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,62],$Vu=[1,66],$Vv=[1,67],$Vw=[1,83],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,84],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[2,74],$VO=[1,100],$VP=[10,25,28,34,38,41,42,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,70,72,74,75,76,77,78,85,86],$VQ=[10,25,46,77],$VR=[2,38],$VS=[1,121],$VT=[2,40],$VU=[1,149],$VV=[1,148],$VW=[38,85],$VX=[2,108],$VY=[10,25,28,34,38,41,42,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,70,72,74,75,76,77,78,85,86],$VZ=[10,25,34,38,41,42,46,57,58,70,72,74,75,76,77,78,85,86],$V_=[10,25,34,38,41,42,46,52,53,57,58,59,60,61,62,63,64,70,72,74,75,76,77,78,85,86],$V$=[10,28,34,38,41,42,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,70,72,74,75,76,77,78,85,86],$V01=[1,163],$V11=[8,10,25,28,34,38,41,42,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,70,72,74,75,76,77,78,85,86],$V21=[75,85,86],$V31=[10,25,28,34,38,41,42,46,52,53,54,55,56,57,58,59,60,61,62,63,64,70,72,74,75,76,77,78,85,86],$V41=[10,25,34,38,41,42,46,57,58,59,60,61,62,63,64,70,72,74,75,76,77,78,85,86],$V51=[10,25,28,34,38,41,42,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,70,74,75,76,77,78,85,86],$V61=[1,187],$V71=[1,191],$V81=[4,8],$V91=[28,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,86],$Va1=[1,213],$Vb1=[10,85];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"EOF":4,"stmts":5,"stmt":6,"TEXT":7,"L":8,"COMMENTS":9,"R":10,"blocks":11,"single_stmt":12,"echo_expr_stmt":13,"assign_stmts":14,"plugin_func_stmts":15,"if_stmts":16,"strip_stmts":17,"function_stmts":18,"for_stmts":19,"while_stmts":20,"section_stmts":21,"block_stmts":22,"literal_stmts":23,"expr":24,"ID":25,"attrs":26,"function":27,"/":28,"block":29,"literal":30,"strip":31,"foreach":32,"vara":33,"as":34,"array":35,"(":36,"params":37,")":38,"objkvs":39,"for":40,"=":41,"to":42,"section":43,"while":44,"attrs_item":45,"STR":46,"if":47,"else_stmts":48,"elseif_stmts":49,"else":50,"elseif":51,"+":52,"-":53,"*":54,"%":55,"^":56,"&&":57,"||":58,">":59,"<":60,">=":61,"<=":62,"==":63,"!=":64,"++":65,"--":66,"!":67,"|":68,"pipe_func":69,"@":70,"literals":71,":":72,"vara_b":73,"[":74,"]":75,".":76,"$":77,"->":78,"vara_e":79,"global_vara":80,"smarty":81,"number":82,"string":83,"bool":84,",":85,"=>":86,"array_item":87,"NUM":88,"true":89,"false":90,"null":91,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",7:"TEXT",8:"L",9:"COMMENTS",10:"R",25:"ID",27:"function",28:"/",29:"block",30:"literal",31:"strip",32:"foreach",34:"as",36:"(",38:")",40:"for",41:"=",42:"to",43:"section",44:"while",46:"STR",47:"if",50:"else",51:"elseif",52:"+",53:"-",54:"*",55:"%",56:"^",57:"&&",58:"||",59:">",60:"<",61:">=",62:"<=",63:"==",64:"!=",65:"++",66:"--",67:"!",68:"|",70:"@",72:":",74:"[",75:"]",76:".",77:"$",78:"->",81:"smarty",85:",",86:"=>",88:"NUM",89:"true",90:"false",91:"null"},
productions_: [0,[3,1],[3,2],[5,2],[5,1],[6,1],[6,3],[6,1],[6,1],[12,1],[12,1],[12,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[13,3],[15,4],[15,3],[18,9],[22,9],[23,8],[17,9],[17,8],[19,11],[19,11],[19,14],[19,11],[19,11],[19,14],[19,9],[19,13],[21,9],[20,9],[45,1],[45,1],[45,1],[45,3],[45,3],[26,1],[26,2],[16,9],[16,1],[16,1],[48,4],[49,5],[49,6],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,2],[24,2],[24,2],[24,2],[24,3],[24,2],[24,3],[24,4],[24,1],[24,1],[24,1],[69,3],[69,3],[69,1],[69,1],[73,1],[73,4],[73,4],[73,3],[73,3],[73,4],[73,3],[73,3],[73,3],[73,3],[79,1],[79,2],[79,2],[33,2],[33,3],[33,2],[33,1],[80,2],[80,4],[80,4],[71,1],[71,1],[71,1],[71,4],[71,1],[37,1],[37,3],[37,0],[14,5],[39,3],[39,5],[87,1],[87,3],[87,3],[87,5],[35,2],[35,3],[83,1],[82,1],[84,1],[84,1],[84,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return []; 
break;
case 2:
 return $$[$0-1]; 
break;
case 3: case 44:
 this.$ = [].concat($$[$0-1], $$[$0]); 
break;
case 4: case 43: case 106:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = { 
            type: 'T', 
            value: $$[$0] 
        }; 
break;
case 6:
 this.$ = { 
            type: 'C', 
            value: $$[$0-1] 
        }; 
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 46: case 47: case 74: case 75: case 76: case 97: case 101: case 102: case 103: case 105: case 112:
 this.$ = $$[$0]; 
break;
case 20: case 70:
 this.$ = $$[$0-1]; 
break;
case 21:
 this.$ = {
            type: 'FUNC',
            name: $$[$0-2],
            attrs: $$[$0-1]
        }; 
break;
case 22:
 this.$ = { 
            type: 'FUNC',
            name: $$[$0-1], 
            attrs: [] 
        }; 
break;
case 23: case 36:
 this.$ = { 
            type: 'FUNC', 
            name: $$[$0-7], 
            attrs: $$[$0-6], 
            block: $$[$0-4] 
        }; 
break;
case 24:
 this.$ = { 
            type: 'FUNC',
            name: $$[$0-7], 
            attrs: $$[$0-6] , 
            block: $$[$0-4] 
        }; 
break;
case 25: case 27:
 this.$ = { 
            type: 'FUNC', 
            name: $$[$0-6], 
            attrs: [], 
            block: $$[$0-4] 
        }; 
break;
case 26:
 this.$ = { 
            type: 'FUNC', 
            name: $$[$0-7], 
            attrs: $$[$0-6], 
            block: $$[$0-4]
        }; 
break;
case 28: case 29:
 this.$ = { 
            type: 'FOR', 
            from: $$[$0-8], 
            item: $$[$0-6], 
            block: $$[$0-4] 
        }; 
break;
case 30:
 this.$ = { 
            type: 'FOR', 
            from: { 
                type:'FUNC', 
                name: $$[$0-11],  
                params: $$[$0-9] 
            }, 
            item: $$[$0-6], 
            block: $$[$0-4] 
        }; 
break;
case 31: case 32:
 this.$ = { 
            type: 'FOR', 
            from: $$[$0-8], 
            item: $$[$0-6][0], 
            block: $$[$0-4] 
        }; 
break;
case 33:
 this.$ = { 
            type: 'FOR', 
            from: { 
                type:'FUNC', 
                name: $$[$0-11],  
                params: $$[$0-9] 
            }, 
            item: $$[$0-6][0], 
            block: $$[$0-4] 
        }; 
break;
case 34:
 this.$ = { 
            type: 'FUNC', 
            name: $$[$0-7], 
            attrs: $$[$0-6] , 
            block: $$[$0-4] 
        }; 
break;
case 35:
 this.$ = { 
            type: 'FOR', 
            item: $$[$0-10], 
            start: $$[$0-8], 
            end: $$[$0-6], 
            block: $$[$0-4] 
        }; 
break;
case 37:
 this.$ = { 
            type: 'WHILE', 
            expr: $$[$0-6], 
            block: $$[$0-4] 
        }; 
break;
case 38: case 39:
 this.$ = { 
            type: 'ATTR', 
            key: { 
                type: 'STR', 
                value: $$[$0] 
            } 
        }; 
break;
case 40:
 this.$ = { 
            type: 'ATTR', 
            key: { 
                type: 'VAR', 
                value: $$[$0] 
            } 
        }; 
break;
case 41:
 this.$ = { 
            type: 'ATTR', 
            key: { 
                type: 'STR', 
                value: $$[$0-2] 
            }, 
            value: $$[$0] 
        }; 
break;
case 42:
 this.$ = { 
            type: 'ATTR', 
            key: { 
                type: 'STR', 
                value: $$[$0-2] 
            }, 
            value: { 
                type: 'STR', 
                value: $$[$0] 
            } 
        }; 
break;
case 45:
 this.$ = { 
            type: 'IF', 
            expr: $$[$0-6] , 
            block: $$[$0-4] 
        }; 
break;
case 48:
 this.$ = { 
            type:'ELSE', 
            block: $$[$0] 
        }; 
break;
case 49: case 50:
 this.$ = { 
            type: 'ELSEIF', 
            expr: $$[$0-2], 
            block: $$[$0] 
        }; 
break;
case 51:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '+' 
        }; 
break;
case 52:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '-' 
        }; 
break;
case 53:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '*' 
        }; 
break;
case 54:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '/' 
        }; 
break;
case 55:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '%' 
        }; 
break;
case 56:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '^' 
        }; 
break;
case 57:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '&&' 
        }; 
break;
case 58:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '||' 
        }; 
break;
case 59:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '>' 
        }; 
break;
case 60:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '<' 
        }; 
break;
case 61:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '>=' 
        }; 
break;
case 62:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '<=' 
        }; 
break;
case 63:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '==' 
        }; 
break;
case 64:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '!=' 
        }; 
break;
case 65: case 67: case 68:
 this.$ = { 
            type: 'ASSIGN', 
            key: $$[$0-1], 
            value: {
                type: 'E',
                items: [$$[$0-1], {
                    type: 'NUM',
                    value: 1
                }],
                ops: '+'
            }
        }; 
break;
case 66:
 this.$ = { 
            type: 'ASSIGN', 
            key: $$[$0-1], 
            value: {
                type: 'E',
                items: [$$[$0-1], {
                    type: 'NUM',
                    value: 1
                }],
                ops: '-'
            }
        }; 
break;
case 69:
 this.$ = { 
            type: 'E', 
            items: [$$[$0]], 
            ops: '!', 
            r: 'l' 
        }; 
break;
case 71:
 this.$ = { 
            type: 'E', 
            items: [$$[$0]], 
            ops: '-', 
            r: 'l' 
        }; 
break;
case 72:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-2], $$[$0]], 
            ops: '|' 
        }; 
break;
case 73:
 this.$ = { 
            type: 'E', 
            items: [$$[$0-3], $$[$0]], 
            ops: '|' 
        }; 
break;
case 77:
 this.$ = { 
            type: 'PIPE', 
            func: $$[$0-2].func, 
            params: [].concat($$[$0-2].params, $$[$0]) 
        }; 
break;
case 78:
 this.$ = { 
            type: 'PIPE', 
            func: $$[$0-2].func, 
            params: [].concat($$[$0-2].params, { 
                type: 'STR', 
                value: $$[$0] 
            } ) 
        }; 
break;
case 79: case 80:
 this.$ = { 
            type: 'PIPE', 
            func: $$[$0], 
            params: [] 
        }; 
break;
case 81:
 this.$ = { 
            type: 'ID', 
            value: $$[$0] 
        }; 
break;
case 82:
 this.$ = [].concat($$[$0-3], { 
            type: 'E', 
            value: $$[$0-1], 
            opt: $$[$0-2], 
            opt1: $$[$0] 
        }); 
break;
case 83:
 this.$ = [].concat($$[$0-3], { 
            type: 'ID', 
            value: $$[$0-1], 
            opt: $$[$0-2], 
            opt1: $$[$0] 
        }); 
break;
case 84:
 this.$ = [].concat($$[$0-2], { 
            type: 'OBJ', 
            value: {}, 
            opt: $$[$0-1], 
            opt1: $$[$0] 
        }); 
break;
case 85:
 this.$ = [].concat($$[$0-2], { 
            type: 'ECHO', 
            value: $$[$0], 
            opt: $$[$0-1]
        }); 
break;
case 86:
 this.$ = [].concat($$[$0-3], { 
            type: 'VAR', 
            value: { 
                type: 'ID', 
                value: $$[$0] 
            }, 
            opt: $$[$0-2] 
        }); 
break;
case 87: case 90:
 this.$ = [].concat($$[$0-2], { 
            type: 'ID', 
            value: $$[$0], 
            opt: $$[$0-1] 
        }); 
break;
case 88:
 this.$ = [].concat($$[$0-2], { 
            type: 'E', 
            value: $$[$0] , 
            opt: $$[$0-1] 
        }); 
break;
case 89:
 this.$ = [].concat($$[$0-2], { 
            type: 'ID', 
            value: $$[$0] , 
            opt: $$[$0-1] 
        }); 
break;
case 91:
 this.$ = { 
            type: 'ECHO', 
            value: $$[$0] 
        }; 
break;
case 92:
 this.$ = [].concat($$[$0-1], {
            type: 'ID',
            value: $$[$0]
        }); 
break;
case 93:
 this.$ = [].concat($$[$0-1], {
            type: 'ECHO',
            value: $$[$0]
        }); 
break;
case 94: case 96:
 this.$ = { 
            type: 'VAR', 
            value: $$[$0] 
        }; 
break;
case 95:
 this.$ = { 
            type: 'VAR', 
            value: [].concat({
                type: 'ID',
                value: $$[$0-1]
            }, $$[$0]) 
        }; 
break;
case 98:
 this.$ = { 
            type: 'GLOBAL', 
            value: $$[$0]
        }; 
break;
case 99: case 100:
 this.$ = [].concat({ 
            type: 'GLOBAL', 
            value: $$[$0-2] 
        }, { 
            type: 'GLOBAL', 
            value: $$[$0], 
            opt: $$[$0-1] 
        }); 
break;
case 104:
 this.$ = { 
            type:'FUNC', 
            name: $$[$0-3],  
            params: $$[$0-1] 
        }; 
break;
case 107: case 113:
 this.$ = [].concat($$[$0-2], $$[$0]); 
break;
case 108:
 this.$ = []; 
break;
case 109:
 this.$ = { 
            type: 'ASSIGN', 
            key: $$[$0-3], 
            value: $$[$0-1] 
        }; 
break;
case 110:
 this.$ = [{ 
            type: 'OBJ', 
            key: $$[$0-2], 
            value: $$[$0] 
        }]; 
break;
case 111: case 115:
 this.$ = [].concat($$[$0-4], { 
            type: 'OBJ', 
            key: $$[$0-2], 
            value: $$[$0] 
        }); 
break;
case 114:
 this.$ = { 
            type: 'OBJ', 
            key: $$[$0-2], 
            value: $$[$0] 
        }; 
break;
case 116:
 this.$ = {
            type: 'ARRAY', 
            items: []
        }; 
break;
case 117:
 this.$ = { 
            type: 'ARRAY', 
            items: $$[$0-1] 
        }; 
break;
case 118:
 this.$ = { 
            type: 'STR', 
            value: $$[$0] 
        }; 
break;
case 119:
 this.$ = { 
            type: 'NUM',
            value: $$[$0] 
        }; 
break;
case 120: case 122:
 this.$ = { 
            type: 'BOOL', 
            value: $$[$0] 
        }; 
break;
case 121:
 this.$ = { 
            type: 'BOOL', 
            value: $$[$0] }; 
        
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{1:[3]},{1:[2,1]},{4:[1,22],6:23,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},o($V2,[2,4]),o($V2,[2,5]),{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},o($V2,[2,7]),o($V2,[2,8]),o($V2,[2,12]),o($V2,[2,13]),o($V2,[2,14]),o($V2,[2,15]),o($V2,[2,16]),o($V2,[2,17]),o($V2,[2,18]),o($V2,[2,19]),o($V2,[2,9]),o($V2,[2,10]),o($V2,[2,11]),o($V2,[2,46]),o($V2,[2,47]),{1:[2,2]},o($V2,[2,3]),{10:[1,59]},{8:$V3,13:45,24:60,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{10:[1,64],25:$Vu,26:63,33:68,45:65,46:$Vv,77:$Vo,80:47},{25:$Vu,26:69,33:68,45:65,46:$Vv,77:$Vo,80:47},{25:[1,72],26:73,33:70,35:71,45:65,46:$Vv,74:$Vn,77:$Vo,80:47},{33:74,77:$Vo,80:47},{8:$V3,13:45,24:75,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{25:$Vu,26:76,33:68,45:65,46:$Vv,77:$Vo,80:47},{25:$Vu,26:77,33:68,45:65,46:$Vv,77:$Vo,80:47},{10:[1,78]},{10:[1,79],28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM},o([10,28,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68],$VN,{41:[1,97]}),{10:[1,99],25:$Vu,26:98,33:68,36:$VO,45:65,46:$Vv,77:$Vo,80:47},{10:[1,101],47:[1,102]},{8:$V3,13:45,24:103,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:104,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:105,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:106,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:107,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:108,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},o($VP,[2,75]),o($VP,[2,76]),{8:$V3,13:113,25:[1,110],73:109,79:111,81:[1,112]},o($VP,[2,97]),o($VP,[2,101]),o($VP,[2,102]),o($VP,[2,103]),o($VP,[2,105]),{8:$V3,13:45,24:34,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},o($VP,[2,119]),o($VP,[2,118]),o($VP,[2,120]),o($VP,[2,121]),o($VP,[2,122]),{8:$V3,13:45,24:116,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,75:[1,114],77:$Vo,80:47,82:48,83:49,84:50,87:115,88:$Vp,89:$Vq,90:$Vr,91:$Vs},o($V2,[2,6]),{10:[1,117],28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM},o($VP,$VN),{36:$VO},{10:[1,118],25:$Vu,33:68,45:119,46:$Vv,77:$Vo,80:47},{5:120,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},o($VQ,[2,43]),o($VQ,$VR,{41:$VS}),o($VQ,[2,39]),o($VQ,$VT),{10:[1,122],25:$Vu,33:68,45:119,46:$Vv,77:$Vo,80:47},o($VQ,$VT,{34:[1,123]}),{34:[1,124]},o($VQ,$VR,{36:[1,125],41:$VS}),{10:[1,126],25:$Vu,33:68,45:119,46:$Vv,77:$Vo,80:47},{41:[1,127]},{10:[1,128],28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM},{10:[1,129],25:$Vu,33:68,45:119,46:$Vv,77:$Vo,80:47},{10:[1,130],25:$Vu,33:68,45:119,46:$Vv,77:$Vo,80:47},{5:131,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},o([4,7,8,10,25,28,34,38,41,42,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,70,72,74,75,76,77,78,85,86],[2,20]),{8:$V3,13:45,24:132,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:133,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:134,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:135,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:136,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:137,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:138,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:139,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:140,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:141,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:142,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:143,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:144,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:145,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},o($VP,[2,65]),o($VP,[2,66]),{25:$VU,31:$VV,69:146,70:[1,147]},{8:$V3,13:45,24:150,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{10:[1,151],25:$Vu,33:68,45:119,46:$Vv,77:$Vo,80:47},o($V2,[2,22]),o($VW,$VX,{71:44,13:45,80:47,82:48,83:49,84:50,35:51,33:61,37:152,24:153,8:$V3,25:$Vt,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,74:$Vn,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs}),{5:154,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{8:$V3,13:45,24:155,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{10:[1,156],28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM},o($VY,[2,67],{68:$VM}),o($VY,[2,68],{68:$VM}),o($VZ,[2,69],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM}),{28:$Vw,38:[1,157],52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM},o($V_,[2,71],{28:$Vw,54:$Vz,55:$VA,56:$VB,65:$VK,66:$VL,68:$VM}),o([10,25,28,34,38,41,42,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,72,75,77,85,86],[2,94],{70:[1,161],74:[1,158],76:[1,159],78:[1,160]}),o($VP,[2,81],{13:113,79:162,8:$V3}),o($V$,[2,96],{13:164,8:$V3,25:$V01}),o([10,25,28,34,38,41,42,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,70,72,74,75,77,78,85,86],[2,98],{76:[1,165]}),o($V11,[2,91]),o($VP,[2,116]),{75:[1,166],85:[1,167],86:[1,168]},o($V21,[2,112],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM}),{5:169,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{5:170,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},o($VQ,[2,44]),{6:23,7:$V0,8:[1,171],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{8:$V3,13:45,24:172,25:[1,173],33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{5:174,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{8:$V3,13:45,24:177,25:$Vt,33:175,35:51,36:$Vb,39:176,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:177,25:$Vt,33:178,35:51,36:$Vb,39:179,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},o($VW,$VX,{71:44,13:45,80:47,82:48,83:49,84:50,35:51,33:61,24:153,37:180,8:$V3,25:$Vt,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,74:$Vn,77:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs}),{5:181,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{8:$V3,13:45,24:182,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{5:183,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{5:184,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{5:185,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{6:23,7:$V0,8:[1,186],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},o($V_,[2,51],{28:$Vw,54:$Vz,55:$VA,56:$VB,65:$VK,66:$VL,68:$VM}),o($V_,[2,52],{28:$Vw,54:$Vz,55:$VA,56:$VB,65:$VK,66:$VL,68:$VM}),o($V31,[2,53],{65:$VK,66:$VL,68:$VM}),o($V31,[2,54],{65:$VK,66:$VL,68:$VM}),o($V31,[2,55],{65:$VK,66:$VL,68:$VM}),o($V31,[2,56],{65:$VK,66:$VL,68:$VM}),o($VZ,[2,57],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM}),o($VZ,[2,58],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM}),o($V41,[2,59],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,65:$VK,66:$VL,68:$VM}),o($V41,[2,60],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,65:$VK,66:$VL,68:$VM}),o($V41,[2,61],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,65:$VK,66:$VL,68:$VM}),o($V41,[2,62],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,65:$VK,66:$VL,68:$VM}),o($V41,[2,63],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,65:$VK,66:$VL,68:$VM}),o($V41,[2,64],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,65:$VK,66:$VL,68:$VM}),o($V51,[2,72],{72:$V61}),{25:$VU,31:$VV,69:188},o($VP,[2,79]),o($VP,[2,80]),{10:[1,189],28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM},o($V2,[2,21]),{38:[1,190],85:$V71},o($VW,[2,106],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM}),o($V81,[2,48],{11:7,12:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,13:17,14:18,15:19,48:20,49:21,6:23,7:$V0}),{10:[1,192],28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM},{5:193,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},o($VP,[2,70]),{8:$V3,13:45,24:194,25:[1,195],33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,75:[1,196],77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:197,25:[1,199],77:[1,198]},{8:$V3,13:45,24:200,25:[1,201],33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{25:[1,202]},o($V$,[2,95],{13:164,8:$V3,25:$V01}),o($V11,[2,92]),o($V11,[2,93]),{32:[1,203],43:[1,204]},o($VP,[2,117]),{8:$V3,13:45,24:205,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:206,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{6:23,7:$V0,8:[1,207],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{6:23,7:$V0,8:[1,208],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,209],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},o($VQ,[2,41],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM}),o($VQ,[2,42],{36:$VO}),{6:23,7:$V0,8:[1,210],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},o($V91,$VN,{10:[1,211]}),{10:[1,212],85:$Va1},{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM,86:[1,214]},o($V91,$VN,{10:[1,215]}),{10:[1,216],85:$Va1},{38:[1,217],85:$V71},{6:23,7:$V0,8:[1,218],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{28:$Vw,42:[1,219],52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM},{6:23,7:$V0,8:[1,220],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{6:23,7:$V0,8:[1,221],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{6:23,7:$V0,8:[1,222],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,223],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:224,25:[1,225],33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},o($V51,[2,73],{72:$V61}),o($V2,[2,109]),o($VP,[2,104]),{8:$V3,13:45,24:226,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{5:227,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},o($V81,[2,49],{11:7,12:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,13:17,14:18,15:19,48:20,49:21,6:23,7:$V0}),{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM,75:[1,228]},{36:$VO,75:[1,229]},o($VP,[2,84]),o($VP,[2,85]),{25:[1,230]},o($VP,[2,87]),o($VY,[2,88],{68:$VM}),o($VP,[2,89],{36:$VO}),o($VP,[2,90]),o($VP,[2,99]),o($VP,[2,100]),o([75,85],[2,113],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM,86:[1,231]}),o($V21,[2,114],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM}),{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,232],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,233],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{31:[1,234]},{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,235],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{5:236,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{5:237,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{8:$V3,13:45,24:238,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:239,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{5:240,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{5:241,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{34:[1,242]},{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,243],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:244,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,245],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,246],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,247],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{30:[1,248]},o($VP,[2,77]),o($VP,[2,78],{36:$VO}),o($VW,[2,107],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM}),o($V81,[2,50],{11:7,12:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,13:17,14:18,15:19,48:20,49:21,6:23,7:$V0}),o($VP,[2,82]),o($VP,[2,83]),o($VP,[2,86]),{8:$V3,13:45,24:249,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{47:[1,250]},{31:[1,251]},{10:[1,252]},{27:[1,253]},{6:23,7:$V0,8:[1,254],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{6:23,7:$V0,8:[1,255],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM,86:[1,256]},o($Vb1,[2,110],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM}),{6:23,7:$V0,8:[1,257],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{6:23,7:$V0,8:[1,258],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{8:$V3,13:45,24:177,25:$Vt,33:259,35:51,36:$Vb,39:260,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{32:[1,261]},{10:[1,262],28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM},{44:[1,263]},{43:[1,264]},{29:[1,265]},{10:[1,266]},o($V21,[2,115],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM}),{10:[1,267]},{10:[1,268]},o($V2,[2,27]),{10:[1,269]},{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,270],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,271],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,13:45,24:272,25:$Vt,33:61,35:51,36:$Vb,46:$Vf,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,273],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,274],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},o($V91,$VN,{10:[1,275]}),{10:[1,276],85:$Va1},{10:[1,277]},{5:278,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{10:[1,279]},{10:[1,280]},{10:[1,281]},o($V2,[2,25]),o($V2,[2,45]),o($V2,[2,26]),o($V2,[2,23]),{32:[1,282]},{32:[1,283]},o($Vb1,[2,111],{28:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,68:$VM}),{32:[1,284]},{32:[1,285]},{5:286,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{5:287,6:4,7:$V0,8:$V1,11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},o($V2,[2,34]),{6:23,7:$V0,8:[1,288],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},o($V2,[2,37]),o($V2,[2,36]),o($V2,[2,24]),{10:[1,289]},{10:[1,290]},{10:[1,291]},{10:[1,292]},{6:23,7:$V0,8:[1,293],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{6:23,7:$V0,8:[1,294],11:7,12:8,13:17,14:18,15:19,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,48:20,49:21},{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,295],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},o($V2,[2,28]),o($V2,[2,31]),o($V2,[2,29]),o($V2,[2,32]),{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,296],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{8:$V3,9:$V4,13:45,24:34,25:$V5,27:$V6,28:[1,297],29:$V7,30:$V8,31:$V9,32:$Va,33:35,35:51,36:$Vb,40:$Vc,43:$Vd,44:$Ve,46:$Vf,47:$Vg,50:$Vh,51:$Vi,53:$Vj,65:$Vk,66:$Vl,67:$Vm,71:44,74:$Vn,77:$Vo,80:47,82:48,83:49,84:50,88:$Vp,89:$Vq,90:$Vr,91:$Vs},{40:[1,298]},{32:[1,299]},{32:[1,300]},{10:[1,301]},{10:[1,302]},{10:[1,303]},o($V2,[2,35]),o($V2,[2,30]),o($V2,[2,33])],
defaultActions: {2:[2,1],22:[2,2]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
    /*JavaScript util package here*/

    parser.operator_sync = function (str) {
        var opsMap = {
            'ne': '!=',
            'neq': '!=',
            'eq': '==',
            'ge': '>=',
            'gte': '>=',
            'le': '<=',
            'lte': '<=',
            'and': '&&',
            'gt': '>',
            'lt': '<',
            'or': '||',
            'not': '!',
            '===': '=='
        };
        return opsMap[str] ? opsMap[str] : str;
    };

    parser.cutStr = function () {
        yy_.yytext = yy_.yytext.substr(1, yy_.yytext.length - 2);
    }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin('c'); return 8; 
break;
case 1: this.popState(); this.begin('v'); return 8; 
break;
case 2: this.begin('iv'); return 8; 
break;
case 3:
                            var s = this.popState();
                            if ('c' == s) {
                                s = this.popState();
                            }
                            if ('v' == s) {
                                this.begin('t');
                            }
                            return 10;
                        
break;
case 4:;
break;
case 5: return 9; 
break;
case 6: return yy_.yytext; 
break;
case 7: return 88; 
break;
case 8: parser.cutStr(); return 46; 
break;
case 9: return parser.operator_sync(yy_.yytext); 
break;
case 10: return parser.operator_sync(yy_.yytext); 
break;
case 11: return yy_.yytext; 
break;
case 12: return 25; 
break;
case 13: 
                            this.popState(); 
                            this.begin('eof'); 
                            //if (yy_.yytext.trim().length > 0) { 
                                return 7; 
                            //}
                        
break;
case 14:
                            if (yy_.yytext.trim().length == 0) {
                                return 4;
                            }
                            else {
                                this.popState();
                                this.begin('eof');
                                return 7;
                            } 
                        
break;
case 15: this.popState(); return 4; 
break;
case 16: return 4; 
break;
case 17: this.begin('t');
break;
}
},
rules: [/^(?:(\{%)(?=\*))/,/^(?:(\{%))/,/^(?:(\{%))/,/^(?:(%\}))/,/^(?:(([ \t\n\r\f\b])+))/,/^(?:\*((.|([ \t\n\r\f\b]))*?)\*(?=(%\})))/,/^(?:((elseif|if|foreach|else|foreachesle|section|sectionelse|for|to|while|as|true|false|null|function|strip|block|smarty|literal))(?=([^a-zA-Z0-9_])))/,/^(?:(([0-9])+(\.([0-9])+)?([E|e][\+\-]?([0-9])+)?))/,/^(?:(("(([^\"]|([ \t\n\r\f\b]))*?)")|('(([^\']|([ \t\n\r\f\b]))*?)')))/,/^(?:((>=|<=|===|==|!=|&&|\|\||->|=>|\+\+|--)))/,/^(?:((and|or|ge|not|gte|le|lte|lt|gt|ne|neq|eq))(?=([^a-zA-Z0-9_])))/,/^(?:([\[\]\(\)\.\$@\+\-\*\/%\^=<>\!:\|,#`]))/,/^(?:(([a-zA-Z_])(([a-zA-Z_])|([0-9]))*))/,/^(?:((.|([ \t\n\r\f\b]))*?)(?=(\{%)))/,/^(?:((.|([ \t\n\r\f\b]))*?)(?=$))/,/^(?:$)/,/^(?:$)/,/^(?:)/],
conditions: {"t":{"rules":[0,13,14],"inclusive":false},"v":{"rules":[0,2,3,4,6,7,8,9,10,11,12],"inclusive":false},"iv":{"rules":[0,2,3,4,6,7,8,9,10,11,12],"inclusive":false},"eof":{"rules":[0,1,15],"inclusive":false},"c":{"rules":[3,5],"inclusive":false},"INITIAL":{"rules":[16,17],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}